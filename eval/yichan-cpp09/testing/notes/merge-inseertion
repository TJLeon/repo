### Merge-Insertion Sort Explained in Point Form

#### Overview
Merge-Insertion Sort is a hybrid sorting algorithm combining the concepts of merge sort and insertion sort to leverage their strengths. It typically applies insertion sort on smaller segments and merge sort for combining the sorted segments.

#### Steps

1. **Divide the Array**:
   - Split the array into smaller subarrays, typically using a recursive approach similar to merge sort.

2. **Insertion Sort on Small Subarrays**:
   - For each small subarray (often determined by a threshold, like subarrays of size 10 or less), apply insertion sort to sort them efficiently.

3. **Merge Sorted Subarrays**:
   - Once the small subarrays are sorted using insertion sort, merge these sorted subarrays using the merge procedure of merge sort.

4. **Recursive Merging**:
   - Continue merging larger subarrays recursively until the entire array is merged into a single sorted array.

#### Detailed Process

1. **Initial Division**:
   - Recursively divide the array into two halves until each subarray reaches a size small enough to be efficiently sorted by insertion sort.

2. **Insertion Sort**:
   - For each small subarray:
     - Traverse the subarray from the second element to the end.
     - For each element, compare it with the previous elements and insert it into its correct position, shifting the other elements as necessary.

3. **Merge Step**:
   - For each pair of sorted subarrays:
     - Create a temporary array to hold the merged result.
     - Use two pointers to traverse the subarrays, comparing elements and copying the smaller element to the temporary array.
     - Continue until all elements from both subarrays are merged.
   
4. **Combine Results**:
   - The result of the merge step is a single sorted array combining the elements of the two input subarrays.
   - Repeat the merge step for larger subarrays until the entire array is sorted.

#### Advantages

- **Efficiency for Small Subarrays**: Insertion sort is very efficient for small arrays due to low overhead.
- **Stable Sorting**: Both merge sort and insertion sort are stable sorting algorithms, meaning they maintain the relative order of equal elements.

#### Example

1. **Given Array**: `[9, 7, 8, 5, 6, 3, 4, 2, 1]`
2. **Divide**: Split into subarrays until small enough for insertion sort.
3. **Insertion Sort on Subarrays**:
   - `[9, 7, 8]` -> Sort to `[7, 8, 9]`
   - `[5, 6, 3]` -> Sort to `[3, 5, 6]`
   - `[4, 2, 1]` -> Sort to `[1, 2, 4]`
4. **Merge Sorted Subarrays**:
   - Merge `[7, 8, 9]` and `[3, 5, 6]` -> `[3, 5, 6, 7, 8, 9]`
   - Merge `[1, 2, 4]` with previous result -> `[1, 2, 3, 4, 5, 6, 7, 8, 9]`

#### Complexity
- **Time Complexity**: O(n log n) in general, with better performance for small arrays due to the insertion sort component.
- **Space Complexity**: O(n) due to the additional space required for merging.

This approach efficiently combines the strengths of merge sort's divide-and-conquer strategy with insertion sort's efficiency on small datasets, making it a versatile and effective sorting algorithm for various scenarios.